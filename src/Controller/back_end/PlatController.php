<?php

namespace App\Controller\back_end;

use App\Entity\Plat;
use App\Form\PlatType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class PlatController extends AbstractController
{
    /**
     * @Route("/affichPlatAdmin", name="affichPlatAdmin")
     */
    public function afficherPlatAdmin(): Response
    {
        return $this->render('back_end/plat/AfficherPlatAdmin.html.twig', [
            "plat" => $this->getDoctrine()->getRepository(Plat::class)->findAll(),
        ]);
    }

    /**
     * @Route("/ajoutPlat", name="ajoutPlat")
     */
    public function ajoutPlat(Request $request): Response
    {
        $plat = new Plat();
        $form = $this->createForm(PlatType::class, $plat);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();
            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */

            $file = $form->get('Photo')->getData();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('plat_directory'),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $plat->setPhoto($fileName);
            $entityManager->persist($plat);
            $entityManager->flush();
            return $this->redirectToRoute('affichPlatAdmin');
        }
        return $this->render("back_end/plat/AjoutPlat.html.twig", [
            "form_title" => "Ajouter un plat",
            "form_plat" => $form->createView(),
        ]);
    }

    /**
     * @Route("/modifyPlat/{id}", name="modifyPlat")
     */
    public function modifyPlat(Request $request, int $id): Response
    {
        $entityManager = $this->getDoctrine()->getManager();

        $plat = $entityManager->getRepository(Plat::class)->find($id);
        $form = $this->createForm(PlatType::class, $plat);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager = $this->getDoctrine()->getManager();
            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */

            $file = $form->get('Photo')->getData();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('plat_directory'),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $plat->setPhoto($fileName);

            $entityManager->flush();
            $this->addFlash('success', 'L"action a été effectué');
            return $this->redirectToRoute("affichPlatAdmin");
        }

        return $this->render("back_end/plat/ModifierPlat.html.twig", [
            "form_title" => "Modifier un plat",
            "form_plat" => $form->createView(),
        ]);
    }

    /**
     * @Route("/deletePlat/{id}", name="deletePlat")
     */
    public function deletePlat(int $id): Response
    {
        $entityManager = $this->getDoctrine()->getManager();
        $plat = $entityManager->getRepository(Plat::class)->find($id);
        $entityManager->remove($plat);
        $entityManager->flush();
        $this->addFlash('success', 'L"action a été effectué');


        return $this->redirectToRoute("affichPlatAdmin");
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
